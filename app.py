import pandas as pd
import re
import streamlit as st

# === FUN√á√ïES AUXILIARES ===
def extrair_prazo(texto):
    """Extrai prazos mantendo o texto original (ex: 'prazo de 15 dias')."""
    padrao = r'(?i)(prazo[^.:\n]*)'
    prazos = re.findall(padrao, texto)
    return "; ".join(prazos) if prazos else ""

def classificar_publicacao(texto, df_classificacao):
    """Retorna Grupo/Teor e Provid√™ncia resumida com base nas frases do modelo."""
    for _, row in df_classificacao.iterrows():
        chave = str(row["Frase-chave"]).strip().lower()
        if chave in texto.lower():
            return row["Grupo/Teor"], row["Provid√™ncia resumida"]
    return "", ""  # caso n√£o encontre

# === CARREGAR MODELO DE CLASSIFICA√á√ÉO (fixo no reposit√≥rio) ===
df_class = pd.read_excel("modelo_classificacao.xlsx")

# === INTERFACE STREAMLIT ===
st.title("üìë Analisador de Publica√ß√µes")

st.write("Carregue o relat√≥rio de publica√ß√µes para gerar a an√°lise autom√°tica.")

# Upload do arquivo de publica√ß√µes
arquivo_publicacoes = st.file_uploader("üìÇ Selecione o relat√≥rio de publica√ß√µes (.xlsx)", type=["xlsx"])

if arquivo_publicacoes:
    # Carregar planilha de publica√ß√µes
    df_pub = pd.read_excel(arquivo_publicacoes)

    resultado = []
    for idx, row in df_pub.iterrows():
        publicacao = str(row.get("Publica√ß√£o", ""))

        grupo, providencia_resumida = classificar_publicacao(publicacao, df_class)
        prazo = extrair_prazo(publicacao)

        resultado.append({
            "N¬∫ publica√ß√£o": idx + 1,
            "Processo": row.get("Processo", ""),
            "N¬∫ de incidente": row.get("Incidente", "s/inc"),
            "Autor": row.get("Parte(s)", "").split(",")[0] if pd.notna(row.get("Parte(s)", "")) else "",
            "Parte Contr√°ria": "MUNIC√çPIO DE S√ÉO PAULO",
            "Classifica√ß√£o de processo": row.get("Classifica√ß√£o", ""),
            "Grupo/Teor": grupo,
            "Provid√™ncia resumida": providencia_resumida,
            "Prazo": prazo,
            "Provid√™ncia completa": publicacao
        })

    df_final = pd.DataFrame(resultado)

    # Mostrar pr√©via
    st.subheader("üîé Pr√©-visualiza√ß√£o da an√°lise")
    st.dataframe(df_final.head(20))

    # Exportar para download
    st.subheader("üì• Baixar resultado")
    st.download_button(
        label="‚¨áÔ∏è Download Excel",
        data=df_final.to_excel(index=False, engine="openpyxl"),
        file_name="analise_publicacoes.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
